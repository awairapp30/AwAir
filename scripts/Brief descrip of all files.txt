Core Blueprints

    The Complete Awair Guide.md
    This is the "What and Why" of the project, defining its core vision and philosophy. It details the user personas (Emma, Marcus, Sarah) and describes all features from a user's perspective, such as TapGame and Sound Mastery. This is the master blueprint for all product-level decisions.

    üóìÔ∏è AWAIR COMPLETE DEVELOPMENT ROADMAP.md
    This is the "When and How" for building the project. It provides a detailed, phase-by-phase implementation timeline from Week 1 onwards. It breaks down all developer tasks, success metrics, and feature rollouts, dictating the development priorities for the entire application.

Technical Architecture & Schemas
3. Technology Stack.md
A concise list of every specific technology used to build AwAir. It covers the frontend (React Native with Expo), backend (Firebase), monetization (RevenueCat), and AI/ML (TensorFlow Lite) choices. It also explains the reasoning behind each choice.

    audio-architecture.md
    The complete technical guide for everything related to audio. It explains the strategy for bundling some tracks in the app versus streaming others from the cloud. It also defines technical specifications like file formats (Ogg Vorbis) and the logic for caching audio.

    database-schema.md
    The definitive blueprint for the entire user database. This file details the exact structure of all data in Firestore, including the users, sessions, and soundscapes collections. It is the single source of truth for how all project data is organized.

    state-and-screen-architecture.md
    This document explains how the app manages its data internally while it's running. It defines the different "state contexts" (like AuthContext and AudioContext) that hold information. It also maps out how all the user screens are connected and how data flows between them.

Implementation Guides
7. ml-implementation.md
A highly technical guide explaining how the AI-powered sound detection works. It details the on-device model (Teachable Machine) used for real-time scoring in the TapGame. It also covers the server-side model (YAMNet) used for generating Sound‚ÜíForm metadata.

    monetization-tech.md
    The step-by-step technical plan for implementing the app's premium subscription features. It details how to integrate the RevenueCat service to handle payments on both iOS and Android. It also explains how the app syncs a user's premium status with the Firestore database.

Development, QA & Debugging Playbooks
9. what happens when things go wrong.md
The developer's operational manual for ensuring a high-quality, stable project. It defines the correct VS Code setup, linting rules, and formatting standards. It also contains the crucial Firebase security rules that protect user data from unauthorized access.

    The Complete AI Debugging Playbook for JavaScript, React & React Native.md
    A general, high-level guide for diagnosing and fixing code errors in the project's core technologies. It covers common issues and principles for effective problem-solving in JavaScript, React, and React Native, focusing on understanding the "why" behind an error.

    Expo & React Native Debugging.md
    A focused playbook for solving errors that are specific to the Expo framework. It details how to handle common runtime crashes like undefined is not an object or Text strings must be rendered.... It also provides solutions for native module installation issues and build failures.

    Master Debugging Playbook for Expo and React.md
    This is the primary diagnostic "bible" that all agents use for solving bugs. It defines the mandatory "Universal Debugging Workflow," which is a systematic process of gathering evidence, forming a hypothesis, and testing it. It is the Guardian AI's core resource when in debugging mode.

Ecosystem & Language Guides
13. Entire Expo ecosystem.md
The main reference manual for building apps with the Expo framework. It covers the entire development lifecycle, from project setup and UI components to using native device features (like the camera or location services) and deploying the final application to the app stores.

    javascript-hoisting-guide.md
    A specific technical reference on a tricky but fundamental concept in the JavaScript language. It explains the different behaviors of var, let, and const declarations. This guide helps developers avoid a common category of bugs and write more predictable code.

Meta & Tooling Guides
15. cross-ai-discovery-mechanisms.md
This document explains the utility scripts that the AI agents use to be aware of each other. Specifically, it details how the start-session.ps1 script finds and reads recent conversation logs from other active sessions, enabling the AI to have real-time awareness.

    knowledge-domain-guide-templates-lessons-learned.md
    A meta-document that summarizes the key insights and lessons learned from the process of creating all of this documentation. It serves as a high-level review of the documentation strategy itself, evaluating what worked well in structuring the project's knowledge base.

    knowledge-domain-guide-templates-usage.md
    A set of instructions on how to properly use the established templates for creating any new documentation for the project. This guide's purpose is to ensure that any future documents maintain a consistent structure and quality, fitting seamlessly into the existing knowledge base.

    validation-and-quality-assurance-tools.md
    This document describes the scripts and processes used to automatically check the quality and consistency of the AI's own conversation logs. It helps ensure that the project's historical record, which the AI relies on for context, remains reliable and well-structured over time.


The AI Agent Profiles (awair_nexus/ai_profiles/)

    Maestro.md
    This is the profile for the Visionary Architect persona. It commands the AI to think strategically about the project, challenging assumptions and innovating on the blueprints. It is focused on high-level planning, future-proofing, and ensuring the final product is not just functional but exceptionally well-crafted. It's the "Why" and "What If" expert.

    The Smart Guardian for a Peaceful Development Workflow.md
    This is the profile for the Proactive Pair-Programmer persona. It commands the AI to act as a real-time code reviewer, error preventer, and methodical debugger. It enforces all blueprint rules during active coding to ensure a stable and bug-free development process. It is the "How" and "Is this correct" expert.

    Co-Pilot with an Integrated QA Lab.md
    This is the profile for the On-Demand QA Lab persona. It commands the AI to focus exclusively on testing and quality assurance. When this persona is active, its goal is to break the application and find bugs before users do, using a variety of strategies like unit tests, user-flow simulations, and edge-case testing.

The Master Control File (awair_nexus/)

    awair-master-ai-knowledge-nexus.md
    This is the single most important file for the AI system. It's not a guide, but the AI's "operating system" and central rulebook. It contains the mandatory protocols that every persona must follow, such as the Critical Analysis Imperative and the Cross-Session Awareness Protocol. It is the definitive source of truth for how the agents must behave.